swagger: '2.0'
info:
  title: Customer Review API
  version: '1.0'
consumes:
  - application/json
produces:
  - application/json
schemes:
  - https
definitions:
  CustomerReviewModel:
    type: object
    required:
      - product_id
      - star_rating
    properties:
      product_id:
        type: string
        example: 'B0042TNMMS'
      product_title:
        type: string
        example: 'Desk'
      customer_id:
        type: string
        example: '30003523'
      review_id:
        type: string
        example: 'review_id_abc'
      review_headline:
        type: string
        example: 'good review'
      review_body:
        type: string
        example: 'this is awesome product'
      star_rating:
        type: integer
        example: 5
  CustomerReviewUpdate:
    type: object
    required:
      - review_id
    properties:
      review_id:
        type: string
        example: 'review_id_abc'
      review_headline:
        type: string
        example: 'good review'
      review_body:
        type: string
        example: 'this is bad product'
      star_rating:
        type: integer
        example: 5
paths:
  /healthcheck:
    get:
      tags: [Health]
      operationId: api.routes.healthcheck
      summary: Health Check
      responses:
        '200':
          description: Status message from server describing current health
  /product_review:
    get:
      tags: [Product Review]
      operationId: api.routes.product_review
      summary: Get the review for product_id
      parameters:
        - name: product_id
          description: the ID of product
          in: query
          type: string
          required: true
          x-example: 'B0042TNMMS'
      responses:
        '200':
          description: all the review of product_id
        '404':
          description: product_id not found
  /customer_review/{customer_id}:
    get:
      tags: [Product Review]
      operationId: api.routes.customer_review
      summary: Get the review submitted by customer_id
      parameters:
        - name: customer_id
          description: the ID of customer
          in: path
          type: string
          required: true
          x-example: '30003523'
      responses:
        '200':
          description: all the review submitted by customer_id
        '404':
          description: customer_id not found
  /most_reviewed_product:
    get:
      tags: [Product Review]
      operationId: api.routes.most_reviewed_product
      summary: Find the top count reviewed products
      parameters:
        - name: count
          description: Number of items to return
          in: query
          type: integer
          minimum: 1
          default: 10
          x-example: 5
      responses:
        '200':
          description: the top reviewed procuts
  /insert_review:
    post:
      tags: [Reviews]
      operationId: api.routes.insert_review
      summary: Insert a customer review
      parameters:
        - in: body
          name: review_payload
          schema:
            $ref: "#/definitions/CustomerReviewModel"
      responses:
        '200':
          description: review inserted to table
        '400':
          description: invalid payload
  /update_review:
    put:
      tags: [Reviews]
      operationId: api.routes.update_review
      summary: Update a customer review
      parameters:
        - in: body
          name: review_payload
          schema:
            $ref: "#/definitions/CustomerReviewUpdate"
      responses:
        '200':
          description: review updated
        '400':
          description: invalid payload
        '404':
          description: review_id not found
  /delete_review/{review_id}:
    delete:
      tags: [Reviews]
      operationId: api.routes.delete_review
      summary: Delete a customer review
      parameters:
        - name: review_id
          description: review_id in the dataset
          in: path
          required: true
          type: string
          x-example: 'review_id_abc'
      responses:
        '200':
          description: review deleted
        '404':
          description: review not found
  /get_review/{review_id}:
    get:
      tags: [Reviews]
      operationId: api.routes.get_review
      summary: Get a customer review
      parameters:
        - name: review_id
          description: review_id in the dataset
          in: path
          required: true
          type: string
          x-example: 'review_id_abc'
      responses:
        '200':
          description: review found
        '404':
          description: review not found
